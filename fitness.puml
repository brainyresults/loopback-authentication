@startuml fitness

' #############################################################
enum TipoUserEnum {
    Aluno
    Personal
}

enum TipoPlanoEnum {
    Anual
    Mensal
    Diário
}

enum ObjetivoEnum {
    GanhoDeMassaMuscular
    CapacidadeAerobica
    QualidadeVida
    Fortalecimento
    PerdaDePeso
}

enum SexoEnum {
    Feminino
    Masculino
}

' qual o padrão de ordem dos dias?
enum DiaSemanaEnum {
    Sábado
    Domingo
    Segunda
    Terça
    Quarta
    Quinta
    Sexta
}

enum HorarioTreinoEnum {
    Manhã
    Tarde
    Noite
}

enum StarRatingEnum {
    1Star
    2Stars
    3Stars
    4Stars
    5Stars
}

enum EspecialidadeEnum {
    Emagrecimento
    Força
    Resistência
}

enum EstadoEnum {
    RJ
    SP
    MG
    ...
}

enum RegiaoCorpoEnum {
    Pernas
    Braço
    Abdomen
    Coxa
    Glúteos
}

' #############################################################
enum EtapaState {
    ADIADO
    ABANDONADO
    INICIADO
    ETAPA_FINALIZADA
    FINALIZADO
}

enum PlanoAulaState {
    AVALIACAO
    ALINHAMENTO_OBJETIVOS
    SELECAO_EXERCICIOS
    DISTRIBUICAO_DIAS
}

enum AtividadeState {
    DISPONIVEL
    INDISPONIVEL
}

' #############################################################
class TreinoController <<Controller>> {
    ---
    setTreinadorAluno()
    setPlanoAula()
    gerarAtividadesSemanais ( Aulas )
    liberarAtividadesSemanais ( Semana )
}

class BuscaController <<Controller>> {
    ---
    searchPersonal ( objetivos, dias, horarios )
}

' #############################################################
class User <<Entity>> {
    nome
    email
    password
    tipo_user TipoUserEnum
    cidade Cidade
    data_nascimento Date
    sexo SexoEnum
    se_ativo Boolean
}

class Personal <<Entity>> {
    userId User
    nome
    especialidades[] EspecialidadeEnum
    experiencia
    avaliacao StarRatingEnum
    visitas Integer
    marcacoes[] MarcacaoAula
    ---
    findPersonal ( userId )
    marcarAula ( userId )
    getPersonalInfo ( userId )
}

class Aluno <<Entity>> {
    userId User
    peso Integer
    altura
    data_pagamento DateTime
    data_cancelamento DateTime
    treinos[]
    ---
    create ( Aluno )
    createTreino ( userId, Treino )
}

class Treino {
    tipo_plano TipoPlanoEnum
    objetivos[] ObjetivoEnum
    status EtapaState
    dias_treino[] DiaSemanaEnum
    horarios[] HorarioTreinoEnum
    data_adesao DateTime
    data_cancelamento DateTime
    data_inicio DateTime
    data_fim DateTime
    aulas[] Aula
}

class Aula {
    responsavel Personal
    status EtapaState
    semana_atual Integer
    total_semanas Integer
    avaliacoes[] QuestionarioAvaliacao
    exercicios[] Exercicio
    atividades[] Atividade
    data_inicio DateTime
    data_fim DateTime
}

class Exercicio {
    ordem Integer
    dia DiaSemanaEnum
    modelo ExercicioModelo
    carga
    repeticao
    intervalos
    descricao_adicional
    tempo_medio
    tempo_medio_total
}

'  Cadastrado pelo Sistema
class ExercicioModelo <<Entity>> {
    autor [ Personal || null ]
    nome
    regiao RegiaoCorpoEnum
    tempo_medio Integer
    intervalo Integer
    video
    descricao
    tempo_medio
}
note right: Personal pode criar seu exercicio

class Atividade {
    status EtapaState
    semana Integer
    data_atividade DateTime
    exercicio Exercicio
    se_ativo Boolean
}

class Cidade <<InMemory>> {
    nome
    uf EstadoEnum
}

' Controla a produtividade e eficiência do Personal
class MarcacaoAula {
    alunoId
    aulaId
    data_solicitacao DateTime
    data_inicio DateTime
    data_fim DateTime
}

' #############################################################
User -- Aluno :aluno >
User - Personal :personal >
User - Cidade

Aluno - Treino
Treino - Aula :aulas >
Personal - Aula :aula >
Personal - MarcacaoAula :marcacoes >

Aula -- Exercicio :exercicios >
Aula - Atividade :atividades >
Atividade -- Exercicio :exercicio >
Exercicio - ExercicioModelo

@enduml
